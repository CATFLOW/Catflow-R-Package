% replace CATFLOW with \proglang{CATFLOW}
% try different classes: book etc -> chapter , but import \pkg \code \proglang

\documentclass[article,nojss]{jss}
\DeclareGraphicsExtensions{.pdf,.eps}
\usepackage[utf8]{inputenc}
%% need no \usepackage{Sweave.sty}


\author{Jan Wienhöfer\\Karlsruhe Institute of Technology}
\Plainauthor{Jan Wienhöfer}

\title{\pkg{Catflow}: Tools for pre- and postprocessing for the hydrological model \proglang{CATFLOW}}
\Plaintitle{Catflow: Tools for pre- and postprocessing for the hydrological model CATFLOW}

\Keywords{utilities, preprocessing, postprocessing, \proglang{CATFLOW}, \proglang{R}}
\Plainkeywords{utilities, preprocessing, postprocessing, CATFLOW, R}

                             
\Abstract{The \pkg{Catflow} \proglang{R}-package is a collection of utilities for the
hydrological model \proglang{CATFLOW}.
The objective of the package is to facilitate pre-processing operations when building up 
\proglang{CATFLOW} models, and post-processing of simulation runs. It collects tools that have
been previously available as \proglang{Matlab} code, as well as newly added functions.
}

\Address{
  Jan Wienhöfer\\
  Karlsruhe Institute of Technology\\
  E-mail: \email{jan.wienhoefer@kit.edu}\\
  }
  
\begin{document}
\tableofcontents

\SweaveOpts{engine=R, eps=FALSE, keep.source=TRUE, prefix.string=FIG/CFvig}        
                                            
<<start,echo=FALSE,results=hide>>=
op <- options()
options(prompt = " ", continue = " ", width=80) #%"R> "
require(xtable)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% First part %%
\newpage
\section*{Introduction} 
\addcontentsline{toc}{section}{Introduction}

\proglang{CATFLOW}  \citep{Maurer+Zehe:2007} is a physically based, distributed model for simulating the dynamics of water and solutes in small rural catchments on the event and season time scale. 
The \pkg{Catflow} package is a collection of utilities for pre- and postprocessing functionality
for \proglang{CATFLOW}, 
written for the \proglang{R} system for statistical computing
\citep[\url{http://www.R-project.org/}]{R:2009}.

This vignette is intended to serve as an tutorial on how to use the tools of the
\pkg{Catflow} package, providing a step-by-step example of a (simple) modelling session. 
For further information on individual functions, please refer to the respective help pages via \code{?NameOfTheFunction}.

The tutorial is organized in two parts.

Part~\ref{sec:preproc} explains how to create \proglang{CATFLOW} models for the simulation of one hillslope:
\begin{itemize}
\item generate the model geometry, in terms of a system of curvilinear orthogonal coordinates, starting from a slope profile line (Section~\ref{sec:geometry}, p.~\pageref{sec:geometry}),
\item write input files that relate to the modelled geometry or time-series which are to be included in the model (Section~\ref{sec:input}, p.~\pageref{sec:input}),
 %  JW put macropores in seperate part
\item simulate three different types of macropores and prepare an appropriate model geometry (Section~\ref{sec:macro}, p.~\pageref{sec:macro}).
\end{itemize}

Part~\ref{sec:postproc} provides details on how to extract and visualise the results
from \proglang{CATFLOW} simulations.

To illustrate the usage of \pkg{Catflow}, we first load the package and 
create a sub-directory within the current working dir, where all the files for our sample CATFLOW session are collected. Here, we use a temporary folder and create a project directory \verb+Catflow-TEST+). The next lines are \proglang{R} code that can be executed after copying to the console:
  % JW hint on code chunks
<<prelim>>=
library("Catflow")

exampledir <- file.path(tempdir(),"Catflow-TEST")                                    # project path in a temporary folder
if(!file_test("-d", exampledir)) dir.create(exampledir)                              # create directory
                                                                                     # file path for input directory
indir <- file.path(exampledir, "in")

@


Please note: \pkg{Catflow} requires the packages  \pkg{deSolve}, \pkg{RColorBrewer}, \pkg{splines}, \pkg{xts}, and \pkg{zoo}, which should be installed automatically together with \pkg{Catflow}. 
                                       
%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\part[Preprocessing for CATFLOW]{Preprocessing for \proglang{CATFLOW}}\label{sec:preproc}


\newpage
This part describes how model geometry and other input files in the specific file formats for \proglang{CATFLOW} can be created.

\section[CATFLOW model geometry]{\proglang{CATFLOW} model geometry}\label{sec:geometry}
To generate a \proglang{CATFLOW} model geometry, we need a slope profile line. This could either be obtained from a GIS (Geographic Information System), e.g. using the CATFLOW ArcGIS wizard \citep{Reusser:2006}, or it may be specified manually.       % JW delete ArcGIS, introduce Grass / Lump
Suppose we have the following slope line, represented by 20 points and associated values for slope elevation and width of the slope (Fig.~\ref{fig:slopeline}):
<<slopelineDecl>>=
# northing of slope line 
  north <- seq(1,11, length=20)  
# easting of slope line
  east  <- seq(2, 8, length=20)
# elevation of at points of slope line
  elev  <- approx(c(8,5),n=20)$y + sin((0:19)/2)/5 
# width of slope at points of slope line (here: uniform) 
  slopewidth <- rep(1,20)  
@

\begin{figure}[h!]
\begin{center}
<<slopelineFig, fig=TRUE, echo=FALSE, height=5, width=6>>=
opa <- par(mfrow=c(2,1), mar=c(4,4,1,1), lend=1)
plot(north, east, t="b", xlab="Northing", ylab="Easting", 
      ylim=c(1,9), xlim=c(0.5,11.5))           
lines(north,east, col="yellow", lwd=30)
lines(north,east, t="b")     
legend("bottomr", c("slope line","slope area"), pch=c(21,NA), lty=1, lwd=c(1,30), col=c(1,"yellow"), bty="n")
 legend("topl", "Map", lty=0, pch=NA, bty="n")

plot(sqrt((north-1)^2 + (east-2)^2), elev, ylab="Elevation [m]",
xlab="Distance along slope line [m]", t="b",         
ylim=c(4,9), xlim=c(-.5,12.5) )
 legend("bottomleft", "Profile", lty=0, pch=NA, bty="n")
par(opa)
@
\caption{\label{fig:slopeline} Schematic of slope line in map and profile view}
\end{center}
\end{figure}

Now suppose we want to generate a CATFLOW geometry from this slope line with a constant thickness of 2 m (\code{htyp = 1, dyy = 2}) and a discretization of 21 nodes to the lateral (\code{xsi}) and 11 nodes to the vertical (\code{eta}). 
 We collect all the values needed, including the total area of the slope and the filename for the output, in a list:
<<slopelistDecl>>=
simple.slope <- list( xh = north,
                      yh = east,
                      zh = elev,
                      bh = slopewidth,
                      tot.area = 12 ,
                      htyp = 1, 
                      dyy = 2,
                      xsi = seq(0,1,length = 21),
                      eta = seq(0,1,length = 11),
                      out.file="test.geo"      )                    
@

With this list we are ready to generate a CATFLOW geometry using \code{make.geometry()}, which  produces a text file for CATFLOW (\code{out.file="test.geo"}) in the specified directory (\code{project.path = "Catflow-TEST/in"}), and generates a plot of the geometry (Fig.~\ref{fig:geometry}):

\begin{Schunk}                      %% JW why Sweave part here?
\begin{Sinput}
 test.geom <- make.geometry(simple.slope, project.path = indir)
   
 file.show(file.path(exampledir,"test.geo") )             ## display the produced file ##
                   
\end{Sinput}
\end{Schunk}                                            %


<<makeGeom,echo=FALSE, results=hide>>=
  test.geom <- make.geometry(simple.slope, project.path = indir)   ## interactive plotting causes problems, hence separate chunk ## 
@ 

\begin{figure}[h!]
\begin{center}
<<plotGeom,fig=TRUE, height=4,width=6>>=
plot.catf.geometry(test.geom, zooming = FALSE, 
                   ylab="Elevation [m]",
                   xlab="Distance along slope line [m]")
@
\caption{\label{fig:geometry} Model geometry generated with \code{make.geometry()} and plotted with \code{plot.catf.geometry()}.}
\end{center}
\end{figure}

For further details, see \code{?make.geometry}. %For reading the output of the CATLFOW Wizard, see \code{?fromArcGIS}.
More elaborate examples of generating CATFLOW geometries are given in Section \ref{sec:macro} in combination with the simulation of macropores.

%%%%%             %%%%%%
\newpage
\section[Preparing CATFLOW input files]{Preparing \proglang{CATFLOW} input files}\label{sec:input}

The \pkg{Catflow} package offers additional possibilities for writing input files besides the geometry file, namely:
\begin{itemize} 
  \item \code{write.facmat()}: multiplier matrices for $K_s$ and $\theta_s$, initial conditions, soil IDs; 
  \item \code{write.precip()}: precipitation time series; 
  \item \code{write.climate()}: climatic data time series; 
  \item \code{write.printout()}: printout times;  
  \item \code{write.surface.pob()}: surface node attributes;
  \item \code{write.control()}: project control files; and
  \item \code{write.CATFLOW.IN()}: the main input file. 
\end{itemize} 

To obtain a complete file structure for running CATFLOW, some more files are
created after these using basic \proglang{R} commands, but without using special functionality of the \pkg{Catflow} package. 

%----------------------------------
\subsection[Multiplier matrices for K_s and theta_s / Inital conditions]{Multiplier matrices for $K_s$ and $\theta_s$ / Inital conditions} 

CATFLOW requires two files with multipliers, one for $K_s$ and one for $\theta_s$. These files can be generated using \code{write.facmat()}, which needs the discretization in terms of \code{eta} and \code{xsi}.
These are contained in \code{test.geom} from Section~\ref{sec:geometry}, and are made available by attaching \code{test.geom}:

<<facmat,results=hide, echo=FALSE>>=

  attach(test.geom)   # attach the geometry to make 'eta' and 'xsi' available
  write.facmat(output.file=file.path(indir, "ksmult.dat") )
  write.facmat(output.file=file.path(indir, "thsmult.dat") )
@

%% same again in "beautiful printing" (with empty lines)
\begin{Schunk}
\begin{Sinput}
 attach(test.geom)   # attach the geometry to make 'eta' and 'xsi' available
    
# Multipliers for scaling saturated hydraulic conductivity - default: all one
 write.facmat(output.file=file.path(indir, "ksmult.dat"))
 
 file.show(file.path(indir, "ksmult.dat"))            ## display the produced file ##   

# Dummy multipliers for scaling saturated water content / porosity: always one
 write.facmat(output.file=file.path(indir, "thsmult.dat") )
 
 file.show(file.path(indir, "thsmult.dat") )          ## display the produced file ##     
\end{Sinput}
\end{Schunk}


It is also possible to specify non-uniform values -- simply specify \code{fac} as a matrix of appropriate size.  \footnote{Note: CATFLOW currently cannot handle multipliers other than '1' for scaling saturated water content.}


The same function may be used to specify initial conditions or soil type identifiers, but for these different header lines are needed:
<<soilID,results=hide, echo=FALSE>>=

# Initial conditions: Uniform Psi (0.8 m) 
  write.facmat(output.file=file.path(indir, "soilhyd.ini"),
               headr=paste("PSI   ", 0,  1, length(eta), length(xsi), 1),
               fac = 0.8)
# Soil type IDs: 
   write.facmat(output.file=file.path(indir, "soils.bod"),
               headr= paste("BODEN",  length(eta), length(xsi), 1),
               fac = matrix(c(rep(1, ceiling(length(eta)/2)),rep(2,floor(length(eta)/2)) ), 
                            nrow = length(eta), ncol = length(xsi))  ) 
@                                     

\begin{Schunk}
\begin{Sinput}
# Initial conditions: Uniform Psi (0.8 m) 
  write.facmat(output.file=file.path(indir, "soilhyd.ini"),
               headr=paste("PSI   ", 0,  1, length(eta), length(xsi), 1),
               fac = 0.8)
 
 file.show(file.path(indir, "soilhyd.ini"))           ## display the produced file ##   

# Soil type IDs: 
  write.facmat(output.file=file.path(indir, "soils.bod"),
               headr= paste("BODEN",  length(eta), length(xsi), 1),
               fac = matrix(c(rep(1, ceiling(length(eta)/2)),
                              rep(2, floor(length(eta)/2)) ), 
                            nrow = length(eta), ncol = length(xsi)) ) 
 
 file.show(file.path(indir, "soils.bod"))             ## display the produced file ##
\end{Sinput}
\end{Schunk}

\subsection{Precipitation time series} \label{sec:rain}

CATFLOW requires a precipitation record from which the rainfall intensities 
are interpolated between discrete time steps; rainfall intensities are thus only needed  
at those time steps when they are changing. 

The function \code{write.precip()} converts a regular rainfall record, i.e. intensity at uniform time intervals, to the CATFLOW specific format:

<<rain, fig=TRUE, results = HIDE, echo = FALSE, height=4, width=6>>=

# some artificial rainfall record
  raindat <- data.frame("hours" = seq(0,48, by=0.5),
                        "precip" = c(rep(0,30), 1, rep(3,4), rep(2,3), 
                                      rep(0,25), rep(1,4), rep(0,30)) ) 
  plot(raindat, t="s", ylab="Precip. [mm/h]")
  write.precip(raindat, file.path(indir, "TEST.rain.dat"), 
                start.time= "01.01.2004 00:00:00" )
@

\begin{Schunk}
\begin{Sinput}
# some artificial rainfall record
  raindat <- data.frame("hours" = seq(0,48, by=0.5),
                        "precip" = c(rep(0,30), 1, rep(3,4), rep(2,3), 
                                      rep(0,25), rep(1,4), rep(0,30)) ) 
  
  plot(raindat, t="s", ylab="Precip. [mm/h]")
  
  write.precip(raindat, file.path(indir, "TEST.rain.dat"), 
                start.time= "01.01.2004 00:00:00" )
                                                      
  file.show(file.path(indir, "TEST.rain.dat"))        ## display the produced file ##            
\end{Sinput}
\end{Schunk}


%----------------------------------
\subsection{Climatic data time series}\label{sec:clima} 

 The function \code{write.climate()} writes a file with climatic data in the CATFLOW specific
 format. This mainly affects the header of the file, which holds some default parameters. 
 
 An example: 
                                               
<<clima, results=hide, echo=FALSE>>=

 climadat <- data.frame(
              "hours" = seq(0,48, by=0.5),
              "GlobRad" =  ifelse(0 + 800 * sin((seq(0,48, by=0.5) - 8)*pi/12) > 0,
                                  0 + 800 * sin((seq(0,48, by=0.5) - 8)*pi/12),  0),
              "NetRad" = NA ,
              "Temp" = 4 +  sin((seq(0,48, by=0.5) - 12)*pi/12)  ,
              "RelHum" = 70 + 10* sin((seq(0,48, by=0.5))*pi/12) ,
              "vWind"  =  rlnorm(97, 0,1) ,
              "dirWind" = runif(97, 0, 359) 
              )
 write.climate(climadat, file.path(indir, "TEST.clima.dat"), 
                  start.time= "01.01.2004 00:00:00" )
@

\begin{Schunk}
\begin{Sinput}
# some climate record
 climadat <- data.frame(
              "hours" = seq(0,48, by=0.5),
              "GlobRad" =  ifelse(0 + 800 * sin((seq(0,48, by=0.5) - 8)*pi/12) > 0,
                                  0 + 800 * sin((seq(0,48, by=0.5) - 8)*pi/12),  0),
              "NetRad" = NA ,
              "Temp" = 4 +  sin((seq(0,48, by=0.5) - 12)*pi/12)  ,
              "RelHum" = 70 + 10* sin((seq(0,48, by=0.5))*pi/12) ,
              "vWind"  =  rlnorm(97, 0,1) ,
              "dirWind" = runif(97, 0, 359) 
              )
 
 write.climate(climadat, file.path(indir, "TEST.clima.dat"), 
                          start.time= "01.01.2004 00:00:00" )

 file.show(file.path(indir, "TEST.clima.dat"))       ## display the produced file ##   
\end{Sinput}
\end{Schunk}


%----------------------------------
\subsection{Printout times} 
           
To write a file with printout times in the CATFLOW specific
format, \code{ write.printout()} can be used.

In the following example, we construct a printout time file for dumping all results (\code{flag = 1}) in intervals of 0.5 h
 
<<printout>>=

 write.printout(output.file =  file.path(indir, "printout.prt"), 
                 start.time = "01.01.2004 00:00:00", 
                 end.time = "03.01.2004 00:00:00", 
                 intervall = 0.5, time.unit = "h",
                 flag = 1)
@  
 

%----------------------------------
\subsection{Surface node attributes} 

The assignment of attributes (land-use, precipitation, climate, wind direction sectors)
to the surface nodes of a CATFLOW model is done via the surface attribute file, which can be
produced using \code{write.surface.pob()}. 

In the following example, uniform values of land-use etc. are assigned to the surface nodes 
in \code{test.geom}, which should be still atttached, and so we can use the lateral discretization vector \code{xsi} directly:

<<surfPob>>=

   write.surface.pob(output.file =  file.path(indir, "surface.pob"), 
                    xs = xsi, lu = 33, 
                    windid = rep(1,4))  
@  
 



%----------------------------------
\subsection{Project control file and main control file} 

The function \code{write.control()} offers the possibility to create a project specific control
file with the simulation control parameters and the input/output filenames. Additionally,
a directory for the output is created.

In the following chunk we create a project control file with the input files that have been generated so far (simulation parameters can take default values here):

<<control, results=hide, echo=FALSE>>=
 write.control(output.file = "TEST.example.in", project.path = exampledir,    
 start.date = "01.01.2004 00:00:00.00", end.date = "03.01.2004 00:00:00",
 slope.in.list = list( slope1 = list( geo.file = "test.geo", soil.file = "soils.bod", 
                                 ks.fac = "ksmult.dat", ths.fac = "thsmult.dat", 
                                 macro.file = "profil.mak", cv.file = "cont_vol.cv", 
                                 ini.file = "soilhyd.ini",print.file = "printout.prt", 
                                 surf.file = "surface.pob", bc.file = "boundary.rb")) )
@

\begin{Schunk}
\begin{Sinput}
 write.control(output.file = "TEST.example.in",   
               project.path = exampledir, 
               start.date = "01.01.2004 00:00:00.00", 
               end.date = "03.01.2004 00:00:00",
               slope.in.list = list( slope1 = list( 
                                geo.file = "test.geo", 
                                soil.file = "soils.bod",
                                ks.fac = "ksmult.dat", 
                                ths.fac = "thsmult.dat", 
                                macro.file = "profil.mak", 
                                cv.file = "cont_vol.cv", 
                                ini.file = "soilhyd.ini",
                                print.file = "printout.prt",                                
                                surf.file = "surface.pob", 
                                bc.file = "boundary.rb") 
                                ) )

 file.show(file.path(exampledir, "TEST.example.in") )           ## display the produced file ##
\end{Sinput}
\end{Schunk}

Note that a output directory named 'out' has been added to the current working dir.


Now we can write the main control file, which merely contains the name of the project control file:
<<mainFile>>=
 write.CATFLOW.IN(control.files="TEST.example.in", 
                  project.path = exampledir)
@



%----------------------------------
\subsection{Other files} 

Some of the files given in the project control file have not been created so far,
e.g. the hilllslope-specific in the \code{slope.in.list} of \code{write.control()}:
\begin{itemize} 
\item macro.file:  'Catflow-TEST/in/profil.mak'
\item cv.file:  'Catflow-TEST/in/cont\_vol.cv'
\item bc.file:  'Catflow-TEST/in/boundary.rb'
\end{itemize} 
 
To complete the file structure, these are produced with the basic \code{cat} command (of course, you could as well use any text editor to create these files):
 
<<otherFiles, results=hide, echo=FALSE>>= 
# macro.file = "profil.mak"
 cat(paste("1  0  2", "ari", "0.00 1.00 0.00 1.00 1  1.00 1.00 ", sep="\n"), 
   file = file.path(indir, "profil.mak")  )
# cv.file = "cont_vol.cv" 
 cat(paste("1", "0.8   0.9   0.98   1.0",sep="\n"), 
   file = file.path(indir, "cont_vol.cv")  )
# bc.file = "boundary.rb"
 cat(paste("L", "1  0", "0. 1. 0",   " ",
           "R", "1  0", "0. 1. -10", " ",
           "T", "1  0", "0. 1. -99 "," ",  
           "B", "1  0", "0. 1. 0",   " ",
           "S", "1  0", "0. 1. 0. 1. -99",   " ",
           "M", 0 , sep="\n"),
   file = file.path(indir, "boundary.rb")  )           
@ 

\begin{Schunk}
\begin{Sinput}
 # macro.file = "profil.mak"
  cat(paste("1  0  2", "ari", "0.00 1.00 0.00 1.00 1  1.00 1.00 ", sep="\n"), 
    file = file.path(indir, "profil.mak")  )

  # cv.file = "cont_vol.cv" 
   cat(paste("1", "0.8   0.9   0.98   1.0",sep="\n"), 
     file = file.path(indir, "cont_vol.cv")  )
  
  # bc.file = "boundary.rb"
   cat(paste("L", "1  0", "0. 1. 0",   " ",
             "R", "1  0", "0. 1. -10", " ",
             "T", "1  0", "0. 1. -99 "," ",  
             "B", "1  0", "0. 1. 0",   " ",
             "S", "1  0", "0. 1. 0. 1. -99",   " ",
             "M", 0 , sep="\n"),
     file = file.path(indir, "boundary.rb")  )                  
\end{Sinput}
\end{Schunk}


The next bunch of files required by CATFLOW are the global simulation files defined in \code{global.in.list} for \code{write.control()}: 

\begin{itemize} 
<<globalIn, echo=FALSE, results = tex>>=
  glob.files <-  eval(formals(write.control)$"global.in.list")
  glob.files <-  sapply(glob.files, unclass)[c(4,1,2,3)]
  ID <- names( glob.files) 
  names( glob.files)   <- NULL    
  globdatlist <-  cbind(  ID , glob.files )
  
  globdatlist <-  apply(globdatlist, 1, function(x) paste("\\item ", x[1], ": '", file.path("Catflow-TEST/in", x[2]) ,"'\n", 
                                          sep="") )
  globdatlist <-  gsub("_","\\_",globdatlist, fixed=T)
  cat(globdatlist)
@

\end{itemize} 

These are created with the following chunks. First we generate the file for the definition
of wind direction sectors:

<<windsec>>=
  cat(paste("4", "240   0.81", " 50   0.78", " 80   0.97", "220   0.94", sep="\n"),
  file = file.path(indir, "winddir.def") )
@


This chunk writes a soil type definition for two soil types:

<<soiltype>>=

 cat(paste("2", "1 Loamy Sand, porosity 0.55, bulk dens 1 g/cm3",
           "1  800  1. 1.  1e-4   0.5 0.34 0.11  20. 0.70  0.050   1. 1. 1.",           
           "4.05e-5  0.55 0.06 12.40 2.28 -6.00 8.00 1000.00 0.80",
           "0. 0. 0.", "0. 0. 0.", "0. 0. 0.", 
           "2 Sandy Clay Loam (30% S, 40 % U; 30 % T)",
           "1  800  1. 1.  1e-4   0.5 0.34 0.11  20. 0.70  0.050   1. 1. 1.",
           "3.42e-6 0.48 0.08 0.96 1.5 -6.00 8.00 1200.00 0.80",
           "0. 0. 0.", "0. 0. 0.", "0. 0. 0.", sep="\n") ,
  file = file.path(indir, "soils.def") )      
@


This chunk produces a a time-series definition file which links to the precipitation, 
land-use and climate records (see \ref{sec:rain}, \ref{sec:clima}):

<<timeser>>=
 cat(paste("PREC", "1", "in/TEST.rain.dat", "",
           "BC", "0", "", "SINKS","0", "", "SOLUTE", "0", "",
           "LAND-USE", "in/landuse/lu_ts.dat", "", 
           "CLIMATE", "1", "in/TEST.clima.dat", "", sep="\n"),
  file = file.path(indir, "timeser.def"))                              ## JW check w/o prepDirs
@

Finally, we can prepare all the files related to land-use specifications, some of which
are placed into their own sub-directory:

<<landuse, echo=FALSE, results=hide>>=

   if(!file_test("-d", file.path(indir, "landuse")) ) dir.create(file.path(indir, "landuse"))
# pointer to land-use parameters
 cat(paste("3", "coniferous forest", "in/landuse/conif.par", sep ="             "),
   file = file.path(indir, "landuse", "lu_file.def") ) 
# time-series of land-use parameters
 cat(paste("01.01.2004 00:00:00.00", "in/landuse/lu_set1.dat", 
            "01.01.2005 00:00:00.00", sep="\n"), 
  file = file.path(indir, "landuse", "lu_ts.dat") )      
# parameters of land-use type 'coniferous forest'
 cat(paste(
      paste("10", "KST", "MAK", "BFI", "BBG", "TWU", "PFH", 
            "PALB", "RSTMIN", "WP_BFW", "F_BFW", sep= "   "),
      "0.    3.     1.    5.    0.95   5.0    5.0     0.15    1.    1.      1.",
      paste(c("1  ","366"), 
            "2.     1.     1.     1.0   1.0    1.0     1.0   546.    0.05    30.",
       sep="    ", collapse="\n"), sep="\n"), 
  file = file.path(indir, "landuse", "conif.par") )
# pointer to surface node attributes
 cat(paste(1, "33  3    %coniferous forest", sep = "\n"),
  file = file.path(indir, "landuse", "lu_set1.dat") )
@

\begin{Schunk}
\begin{Sinput}
  # make subdirectory
  if(!file_test("-d", file.path(indir, "landuse")) ) dir.create(file.path(indir, "landuse"))
   
  # pointer to land-use parameters
   cat(paste("3", "coniferous forest", "in/landuse/conif.par", sep ="             "),
     file = file.path(indir, "landuse", "lu_file.def") ) 
  
  # time-series of land-use parameters
   cat(paste("01.01.2004 00:00:00.00", "in/landuse/lu_set1.dat", 
              "01.01.2005 00:00:00.00", sep="\n"), 
     file = file.path(indir, "landuse", "lu_ts.dat") )      
  
  # parameters of land-use type 'coniferous forest'
   cat(paste(
        paste("10", "KST", "MAK", "BFI", "BBG", "TWU", "PFH", 
              "PALB", "RSTMIN", "WP_BFW", "F_BFW", sep= "   "),
        "0.    3.     1.    5.    0.95   5.0    5.0     0.15    1.    1.      1.",
        paste(c("1  ","366"), 
              "2.     1.     1.     1.0   1.0    1.0     1.0   546.    0.05    30.",
         sep="    ", collapse="\n"), sep="\n"), 
      file = file.path(indir, "landuse", "conif.par") )
  
  # pointer to surface node attributes
   cat(paste(1, "33  3    %coniferous forest", sep = "\n"),
     file = file.path(indir, "landuse", "lu_set1.dat") )
\end{Sinput}
\end{Schunk}

Now that we have completed the preparation of input files we are ready to run CATFLOW
on this simple example. First copy \verb+CATFLOW.EXE+ to the trget directory, for example the Catflow exe shipped with the \pkg{Catflow} package directory
then run the program. To do this within \proglang{R}, type:
<<runsim, results=hide>>=
 file.copy(from = system.file("Catflow-TEST/CATFLOW.exe", package = "Catflow"),
           to = exampledir) 
 owd <- setwd(exampledir)                                    # change into dir
 system2("CATFLOW")                                          # run CATFLOW
 setwd(owd)                                                  # change back work dir
@

The simulation results are used in part \ref{sec:postproc} to demonstrate the post-processing facilities of the \pkg{Catflow} package.

Do not refrain from tidying up:
<<tidy1>>=
detach(test.geom)
@

 
%%jw%% verweis auf inst directory

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% INCLUDE Macropore Part, or separate doc     # JW

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\part[Postprocessing of CATFLOW simulations]{Postprocessing of \proglang{CATFLOW} simulations}
\label{sec:postproc}

This part describes how the result files from \proglang{CATFLOW} simulations can be read into \proglang{R} for visualisation and further analyses.


\section{Cleaning the simulation directory}


By inspection of the output directory of the first example, we notice that some of 
the files produced by CATFLOW are not really useful:
<<outdir, width=5>>=
print(dir(file.path(exampledir, "out")))

@
 As we have not simulated solute transport or a drainage network, the
corresponding output files are redundant, and we could therefore delete the files using the function \code{del.files}:

<<fileClean, eval=FALSE>>=
del.files(exampledir, file2del=c("ve.out", "vx.out", "c.out", "gang.out"))
@


%jw leave or skip?
Further cleaning of subdirectories will especially become useful with larger simulation projects, for example for simulations that differ only in some aspects (macropore geometry, land-use definitions, soil type parameters), but otherwise share a lot of input files.
In these cases you might like to get rid of the input directory in the simulation folders, but retain the output files and some of the input. This can be achieved with the function
\code{catf.batch.cleanup}:
<<batchClean, eval=FALSE>>=
catf.batch.cleanup(exampledir, indir = "./in", interact = TRUE)
@
%%jw leave or skip?


\section{Reading result files}

Result files from CATFLOW simulations can be read using the functions :

\begin{itemize}
\item \code{read.catf.balance()}
\item \code{read.surfrun.out()}
\item \code{read.climate()} 
\item \code{read.catf.results()}
\item \code{read.climate()}
\item \code{read.evapo()}
\item \code{read.precip()}
\item \code{read.soil.mat()}
\item \code{read.channelflow.out()}
\end{itemize}


\section{Visualisation}

Results from CATFLOW simulations can be visualised using the functions :

\begin{itemize}
\item \code{plot.catf.bal()}
\item \code{plot.catf.grid()}
\item \code{plot.catf.movie()}
\end{itemize}

\section{Miscellaneous}

Further functions include:

\begin{itemize}
\item{\code{use.psi.fin()}: }{Use final matric potential to assign initial conditions for a subsequent model run}
\item{\code{read.facmat()}: }{Read a file with node-wise specification of values, e.g. initial conditions}
\item{\code{get.realworld.coords()}: }{Calculate the real-world coordinates of a simulation domain}
\item{\code{node2poly()}: }{Calculate polygons around computational nodes}
\item{\code{color.codes()}: }{Color codes for plotting}
\end{itemize}
The latter two functions are also used in the visualisation routines.

\clearpage
\section*{End of tutorial}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A few things are left to tidy-up at the end of this tutorial session: 
<<ending, results=hide>>=
try(detach(test.geom), silent=TRUE)  # detach test geometry object
options(op)                          # reset options
@


\section*{Computational details}

The results in this vignette were obtained using the package 
\pkg{Catflow} \Sexpr{gsub("-", "--", packageDescription("Catflow")$Version)},
with \proglang{R} \Sexpr{paste(R.Version()[6:7], collapse = ".")} and the packages
\pkg{deSolve} \Sexpr{gsub("-", "--", packageDescription("deSolve")$Version)},
\pkg{RColorBrewer} \Sexpr{gsub("-", "--", packageDescription("RColorBrewer")$Version)},
\pkg{splines} \Sexpr{gsub("-", "--", packageDescription("splines")$Version)},
\pkg{xts} \Sexpr{gsub("-", "--", packageDescription("xts")$Version)} and
\pkg{zoo} \Sexpr{gsub("-", "--", packageDescription("zoo")$Version)}.
%The \pkg{Catflow} package is available via SVN with guest login, visit 
%\url{http://www.experimental-hydrology.net/models/index.php?title=Catflow_-_SVN_repository/}.
\proglang{R} itself and the additional packages are available from
CRAN at \url{http://CRAN.R-project.org/}.


\bibliography{catflow}




\end{document}


